{
    "author": {
        "name": "Marcin BiegaÅ‚a"
    },
    "type": "module",
    "version": "0.1.0",
    "dependencies": {
        "@types/lodash": "^4.17.13",
        "asyncp": "^0.8.0",
        "axios": "^1.7.7",
        "lodash": "^4.17.11"
    },
    "description": "A javascript library for interacting with the Nissan Leaf Carwings API.",
    "devDependencies": {
        "@types/jest": "^29.5.14",
        "@types/node": "^22.9.0",
        "@typescript-eslint/eslint-plugin": "^8.13.0",
        "esbuild": "^0.24.0",
        "eslint": "^8.57.1",
        "eslint-config-prettier": "^9.1.0",
        "eslint-plugin-import": "^2.31.0",
        "eslint-plugin-n": "^16.6.2",
        "eslint-plugin-prettier": "^5.2.1",
        "eslint-plugin-promise": "^7.1.0",
        "jest": "^29.7.0",
        "npm-run-all": "^4.1.5",
        "prettier": "^3.3.3",
        "ts-jest": "^29.2.5",
        "ts-loader": "^9.5.1",
        "typescript": "^5.6.3"
    },
    "homepage": "https://github.com/biegal/carwings-typescript#readme",
    "keywords": [
        "carwings",
        "nissan",
        "leaf"
    ],
    "license": "MIT",
    "main": "./dist/index.js",
    "name": "carwings-typescript",
    "readme": "# Carwings Javascript API Library and Tools\n\nThis code is meant for interacting with the Nissan Leaf Carwings API. This API allows one to query a swath of information about the vehicle, some of it cached in the cloud and some pulled directly from the vehicle over its cellular connectivity. The API also allows modifying a limited set of vehicle states (AC on/off, charge start/stop).\n\nIt is written for [node.js](https://nodejs.org) and uses the [babel transpiler](https://babeljs.io) mainly for taking advantage of es6 modules and es8(?) async/await to make network ops more pleasant to work with.\n\n## Getting Started\n\nThe code in `src` is the non-transpiled source, and in `lib` can be found the transpiled library that is ready to be `require()`'d directly from node >= ^6.9 (may work on older, but this is untested).\n\nAfter cloning the code (and installing node.js) simply run `npm install` to install required dependencies.\n\n## Development\n\nThere are currently a couple simple helper scripts defined in `package.json`:\n\n- `npm run build` will transpile from `src` to `lib`\n- `npm run bstart` will run the code from `src` directly using [babel-node](https://babeljs.io/docs/usage/cli/#babel-node) for a simplified dev cycle.\n\n## License\n\nMIT, yo.\n",
    "readmeFilename": "readme.markdown",
    "repository": {
        "type": "git",
        "url": "git+https://github.com/bhagyas/carwings-typescript.git"
    },
    "exports": {
        "import": "./dist/esm/index.js",
        "require": "./dist/cjs/index.js",
        "default": "./dist/cjs/index.js",
        "types": "./dist/types/index.d.ts"
    },
    "scripts": {
        "test": "jest",
        "test:coverage": "jest --coverage",
        "lint": "eslint ./src && prettier --check .",
        "format": "eslint ./src --fix && prettier --write .",
        "build:cjs-min": "esbuild `find src \\( -name '*.ts' ! -name '*.spec.ts' ! -name '*.test.ts' ! -name 'client.ts' \\)` --minify --outdir=dist/cjs --platform=node --sourcemap --format=cjs --keep-names --target=esnext",
        "build:esm-min": "esbuild `find src \\( -name '*.ts' ! -name '*.spec.ts' ! -name '*.test.ts' ! -name 'client.ts' \\)` --minify --outdir=dist/esm --platform=node --sourcemap --format=esm --keep-names --target=esnext",
        "build": "rm -rf dist && npm-run-all test && tsc --emitDeclarationOnly && npm-run-all build:cjs-min build:esm-min"
    }
}
