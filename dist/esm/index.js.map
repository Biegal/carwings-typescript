{
  "version": 3,
  "sources": ["../../src/index.ts"],
  "sourcesContent": ["import { createCipheriv } from \"crypto\";\nimport * as _ from \"lodash/fp\";\nimport axios from \"axios\";\n\naxios.defaults.headers.post[\"Content-Type\"] =\n  \"application/x-www-form-urlencoded\";\naxios.defaults.baseURL = \"https://gdcportalgw.its-mo.com\";\n\nprocess.on(\"unhandledRejection\", (r) => console.log(r));\nconst initial_app_strings: string = \"geORNtsZe5I4lRGjG9GZiA\";\nconst defaultRegionCode: string = \"NNA\";\nconst language: string = \"en-US\";\nconst tz = \"America/Denver\";\n\nconst tlog = (t) =>\n  _.thru((d) => {\n    console.log(t, d);\n    return d;\n  });\n\nexport interface ICarwingsSession extends Function {}\n\nexport class CarwingsAuthenticator {\n  username: string;\n  password: string;\n  regionCode: string;\n\n  constructor(username, password, regionCode) {\n    const base64regex =\n      /^(?:[A-Z0-9+\\/]{4})*(?:[A-Z0-9+\\/]{2}==|[A-Z0-9+\\/]{3}=|[A-Z0-9+\\/]{4})$/i;\n    this.username = username;\n    this.password = password;\n    this.regionCode = regionCode;\n\n    // This test fails if password is not simple words. Skip for now\n    // if(base64regex.test(this.password)){\n    //   var buff = Buffer.from(password);\n    //   this.password = buff.toString('base64');\n    // }\n  }\n\n  async login(): Promise<ICarwingsSession> {\n    const session = await loginSession(\n      this.username,\n      this.password,\n      this.regionCode\n    );\n    return session;\n  }\n\n  async validateSession(\n    session: ICarwingsSession,\n    authenticated = true\n  ): Promise<ICarwingsSession> {\n    let validatedSession = session;\n    //console.log('checkIfAuthenticated');\n    if (typeof validatedSession !== \"function\") {\n      authenticated = false;\n    }\n    if (!authenticated) {\n      validatedSession = await this.login();\n    }\n    return validatedSession;\n  }\n}\n\nexport interface ICarwingsCheckStatus {\n  status: number;\n}\n\n/**\n * Sleeps.\n * @param {number} ms\n * @returns {Promise<any>}\n */\nfunction sleep(ms: number = 0) {\n  return new Promise((r) => setTimeout(r, ms));\n}\n\n/**\n * Makes a request to the API endpoint\n * @param {string} action\n * @param data\n * @returns {Promise<void>}\n */\nexport async function api(action: string, data: any) {\n  const params = new URLSearchParams(data);\n\n  console.log('API', action);\n  console.log('Params', params.toString());\n\n  const response = await axios.post(\n    `/gworchest_160803EC/gdc/${action}.php`,\n    params.toString()\n  );\n\n  if (response.data.status === 200) {\n    //console.log(`\uD83C\uDF43 api DATA ${action} \uD83D\uDC4D`, data);\n    //console.log(`\uD83C\uDF43 api ${action} \uD83D\uDC4D`, response.data);\n    return response.data;\n  } else {\n    if (response.data && response.data.status === 401) {\n      // Send back 401 response so it can be handled.\n      //console.log('Carwings Status 401');\n      return response.data;\n    } else {\n      //console.log(`api ${action} \uD83D\uDC4E\\r\\n`, response);\n      throw new Error(response.data.ErrorMessage);\n    }\n  }\n}\n\nconst blowPassword = _.curry((key: string, plainpass: string): string => {\n  const cipher = createCipheriv(\"bf-ecb\", key, \"\");\n\n  let encpass = cipher.update(plainpass, \"utf8\", \"base64\");\n  encpass += cipher.final(\"base64\");\n\n  return encpass;\n});\n\n/**\n * Returns a session id from a given vehicle info list item.\n * @param profile\n * @returns {string}\n */\nfunction getsessionid(profile): string {\n  //console.log(\"LOGIN\", profile);\n  if (profile && profile.vehicleInfo && profile.vehicleInfo[0]) {\n    return profile.vehicleInfo[0].custom_sessionid;\n  } else if (\n    profile &&\n    profile.VehicleInfoList &&\n    profile.VehicleInfoList.vehicleInfo[0]\n  ) {\n    return profile.VehicleInfoList.vehicleInfo[0].custom_sessionid;\n  } else {\n    return null;\n  }\n}\n\nfunction getvin(profile): string {\n  if (profile && profile.vehicleInfo && profile.vehicleInfo[0]) {\n    return profile.vehicleInfo[0].vin;\n  } else if (\n    profile &&\n    profile.VehicleInfoList &&\n    profile.VehicleInfoList.vehicleInfo[0]\n  ) {\n    return profile.VehicleInfoList.vehicleInfo[0].vin;\n  } else {\n    return null;\n  }\n}\n\nfunction getregioncode(profile): string {\n  return profile.CustomerInfo.RegionCode;\n}\n\nconst acompose = (fn?: Function, ...rest): Function => {\n  if (rest.length) {\n    return async (...args) => fn(await acompose(...rest)(...args));\n  } else {\n    //if there are no arguments.\n    return fn;\n  }\n};\n\nconst performChallenge = acompose(\n  (responseResult) => responseResult.baseprm,\n  () => api(\"InitialApp\", { initial_app_strings })\n);\n\n// rawCredentials => apiCredentials\nconst generateCredentials = async (\n  UserId: string,\n  password: string,\n  RegionCode: string = defaultRegionCode\n) => {\n  return _.compose(\n    (Password) => ({ UserId, Password, RegionCode }),\n    blowPassword(await performChallenge())\n  )(password);\n};\n\n// apiCredentials => profile\nconst performUserLogin = async (credentials) => {\n  return await api(\"UserLoginRequest\", {\n    initial_app_strings,\n    ...credentials,\n  });\n};\n\n// rawCredentials => profile\nconst performAuthentication = acompose(performUserLogin, generateCredentials);\n\n// rawCredentials => (apioperation => apiresults)\n/**\n * Logs in and creates a session.\n * @type {Function}\n */\nexport const loginSession: ICarwingsSession = acompose(\n  (sessionRequest) => async (action) =>\n    await api(action, { ...sessionRequest }),\n  (resultResponse) => ({\n    custom_sessionid: getsessionid(resultResponse),\n    VIN: getvin(resultResponse),\n    RegionCode: getregioncode(resultResponse),\n  }), //transforms auth response.\n  performAuthentication //performs authentication\n);\n\n/**\n * Returns a result after waiting for 5000ms and a callback.\n */\nconst polledResult = _.curry(\n  async (session: ICarwingsSession, action: string, resultKey: string) => {\n    let result;\n    //console.info(\"ResultKey \uD83D\uDD11\", resultKey);\n    //console.info(\"action \", action);\n    do {\n      //sleep and make a request.\n      await sleep(5000);\n      result = await session(action, { resultKey });\n      //console.log('POLLED result', result);\n    } while (result.responseFlag !== \"1\");\n\n    return result;\n  }\n);\n\n/**\n * Makes a request for the action, and then keeps polling for the polledAction to complete.\n */\nconst longPolledRequest = _.curry(\n  async (action: string, polledAction: string, session: ICarwingsSession) => {\n    //console.info(\"\u23F0  making a long polled request...\" + action + ' ' + polledAction);\n    const result = await acompose(\n      polledResult(session, polledAction),\n      (actionResponseResult) => actionResponseResult.resultKey,\n      () => session(action)\n    )();\n    return result;\n  }\n);\n\n// const longPolledRequest = _.curry(async (action:string, polledAction:string, session:ICarwingsSession) => {\n//   console.info(\"\u23F0  making a long polled request...\" + action + ' ' + polledAction);\n//   return acompose(\n//     await polledResult(session, polledAction),\n//     actionResponseResult => actionResponseResult.resultKey,\n//     () => session(action),\n//   );\n// });\n\nexport const batteryRecords = (session: ICarwingsSession) =>\n  session(\"BatteryStatusRecordsRequest\");\nexport const batteryStatusCheckRequest = (session: ICarwingsSession) =>\n  session(\"BatteryStatusCheckRequest\");\nexport const batteryStatusCheck = (session: ICarwingsSession) =>\n  longPolledRequest(\n    \"BatteryStatusCheckRequest\",\n    \"BatteryStatusCheckResultRequest\",\n    session\n  );\nexport const batteryChargingRequest = (session: ICarwingsSession) =>\n  session(\"BatteryRemoteChargingRequest\");\n\nexport const hvacOn = (session: ICarwingsSession) => session(\"ACRemoteRequest\");\nexport const hvacOff = (session: ICarwingsSession) =>\n  session(\"ACRemoteOffRequest\");\nexport const hvacStatus = (session: ICarwingsSession) =>\n  session(\"RemoteACRecordsRequest\");\n"],
  "mappings": "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",
  "names": ["createCipheriv", "_", "axios", "r", "initial_app_strings", "defaultRegionCode", "language", "tz", "tlog", "__name", "t", "d", "CarwingsAuthenticator", "username", "password", "regionCode", "base64regex", "loginSession", "session", "authenticated", "validatedSession", "sleep", "ms", "api", "action", "data", "params", "response", "blowPassword", "key", "plainpass", "cipher", "encpass", "getsessionid", "profile", "getvin", "getregioncode", "acompose", "fn", "rest", "args", "performChallenge", "responseResult", "generateCredentials", "UserId", "RegionCode", "Password", "performUserLogin", "credentials", "performAuthentication", "sessionRequest", "resultResponse", "polledResult", "resultKey", "result", "longPolledRequest", "polledAction", "actionResponseResult", "batteryRecords", "batteryStatusCheckRequest", "batteryStatusCheck", "batteryChargingRequest", "hvacOn", "hvacOff", "hvacStatus"]
}
